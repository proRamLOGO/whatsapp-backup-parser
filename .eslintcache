[{"/Users/proRam/Documents/whatsapp-backup-parser/src/reportWebVitals.js":"1","/Users/proRam/Documents/whatsapp-backup-parser/src/views/components/chatroom/Message.js":"2","/Users/proRam/Documents/whatsapp-backup-parser/src/views/components/chatroom/index.js":"3","/Users/proRam/Documents/whatsapp-backup-parser/src/views/pages/Home/index.js":"4","/Users/proRam/Documents/whatsapp-backup-parser/src/utils/makeMessages.js":"5","/Users/proRam/Documents/whatsapp-backup-parser/src/App.js":"6","/Users/proRam/Documents/whatsapp-backup-parser/src/views/components/AuthorModal.js":"7"},{"size":362,"mtime":1621694426384,"results":"8","hashOfConfig":"9"},{"size":6769,"mtime":1621730710092,"results":"10","hashOfConfig":"9"},{"size":7879,"mtime":1621731459518,"results":"11","hashOfConfig":"9"},{"size":7015,"mtime":1621730976119,"results":"12","hashOfConfig":"9"},{"size":1757,"mtime":1621730496491,"results":"13","hashOfConfig":"9"},{"size":183,"mtime":1621694426348,"results":"14","hashOfConfig":"9"},{"size":2509,"mtime":1621694426386,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tqlz9g",{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/proRam/Documents/whatsapp-backup-parser/src/reportWebVitals.js",[],"/Users/proRam/Documents/whatsapp-backup-parser/src/views/components/chatroom/Message.js",["31","32"],"import {React} from 'react' ;\nimport darkSentPin from '../../../assets/darkSentPin.svg';\nimport darkReceivedPin from '../../../assets/darkReceivedPin.svg';\nimport lightSentPin from '../../../assets/lightSentPin.svg';\nimport lightReceivedPin from '../../../assets/lightReceivedPin.svg';\nimport parse from 'html-react-parser';\n\nfunction processMessage(message) {\n    // return message;\n    // The function will \n    // 1. Split message acc to line breaks\n    // 2. Detect for links\n    // 3. Add bold(<b></b>), italic(<i></i>) and strikethrough(<s></s>) tags in between the message at respective places. By watching '*'s, '_'s and '~' respectively.\n\n    // URLs PROCESSED\n    var urlRegex = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/gm;\n    message = message.replace(urlRegex, url => '<a style=\"text-decoration: none; color: #039BE5;\" href=\"' + url + '\" target=\"_blank\" rel=\"noopener noreferrer\" >' + url + '</a>') ;\n\n    // MESSAGE SPLITTED ON BASIS OF NEW LINES/LINE BREAKS\n    const partsOfMessage = message.split(/\\r\\n|\\n|\\r/);\n    \n    // PROCESSING BOLD, ITALIC AND STRIKETHROUGH\n    let processedMessage = '';\n    for ( var i = 0 ; i < partsOfMessage.length ; ++i ) { \n        \n        let processedMessagePart = '';\n        let totalBolds=0, totalItalics=0, totalStrikes=0;\n        for ( const ch of partsOfMessage[i] ) {\n            if ( ch==='*')\n                ++totalBolds;\n            else if ( ch==='_')\n                ++totalItalics;\n            else if ( ch==='~')\n                ++totalStrikes;\n        }\n\n        let boldCount=0, italicCount=0, strikeCount=0;\n        for ( const ch of partsOfMessage[i] ) {\n            \n            if ( ch==='*') {\n                if ( (totalBolds&1)===1 && boldCount===totalBolds-1 )\n                    continue;\n                processedMessagePart += ( (boldCount&1)===0 ) ? '<b>' : '</b>';\n                ++boldCount;\n            }\n            else if ( ch==='_') {\n                if ( (totalItalics&1)===1 && italicCount===totalItalics-1 )\n                    continue;\n                processedMessagePart += ( (italicCount&1)===0 ) ? '<i>' : '</i>';\n                ++italicCount;\n            }\n            else if ( ch==='~') {\n                if ( (totalStrikes&1)===1 && strikeCount===totalStrikes-1 )\n                    continue;\n                processedMessagePart += ( (strikeCount&1)===0 ) ? '<s>' : '</s>';\n                ++strikeCount;\n            } else {\n                processedMessagePart += ch;\n            }\n        }\n        processedMessage += processedMessagePart + ((i<=(partsOfMessage.length-2))?'<br/>':'');\n    }\n    \n    return processedMessage;\n}\n\nfunction Message( {content, sender, theme} ) {\n\n    const styles = {\n\n        'bannerContainer' : {\n            display: 'flex',\n            justifyContent: 'center',\n        },\n    \n        'banner' : {\n            padding: '5px 12px 6px',\n            margin: '6px',\n            textAlign: 'center',\n            backgroundColor: (theme==='light')?'#E1F3FB':'#1E2A30',\n            borderRadius: 7.5,\n            boxShadow: '0 1px 0.5px rgba(0,0,0,.15)',\n            color: (theme==='light')?'#1D1E1F':'#FFF',\n            fontSize: 12,\n        },\n        \n        'messageBodyreceived' : {\n            padding : '0px 52px 0px 52px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'start',\n            color: (theme==='light')?'#000':'#FFF',\n        },\n    \n        'messageBodysent' : {\n            padding : '0px 52px 0px 52px',\n            display: 'flex',\n            flexDirection: 'row-reverse',\n            alignItems: 'start',\n            color: (theme==='light')?'#000':'#FFF',\n        },\n    \n        'sent' : {\n            padding: '6px 7px 1px 9px',\n            marginBottom: 5,\n            maxWidth: '60%',\n            backgroundColor: (theme==='light')?'#DCF8C6':'#056162',\n            borderRadius: '7.5px 0px 7.5px 7.5px',\n            fontSize: 14,\n            boxShadow: '0 1px .5px rgba(0,0,0,.13)',\n            width: 'fit-content',\n            wordWrap: 'break-word',\n        },\n    \n        'received' : {\n            padding: '6px 7px 0px 9px',\n            marginBottom: 5,\n            maxWidth: '60%',\n            backgroundColor: (theme==='light')?'#FFF':'#262D31',\n            borderRadius: '0px 7.5px 7.5px 7.5px',\n            boxShadow: '0 1px .5px rgba(0,0,0,.13)',\n            fontSize: 14,\n            width: 'fit-content',\n            wordWrap: 'break-word',\n        },\n    \n        'time' : {\n            textAlign: 'right',\n            fontSize: 11,\n            fontWeight: '500',\n            color: (theme==='light')?'#8C8C8C':'#9CBCBD',\n        },\n    \n        'senderName' : {\n            fontSize: 12.8,\n            fontWeight: 'bold',\n            margin: '0px 0px 5px -2px',\n            padding: '0px 0px 5px 2px',\n        }, \n    \n        'a' : {\n            textDecoration: 'none',\n            color: '#039BE5',\n        },\n    \n    };\n\n\n    function Banner( {content} ) {\n        return (\n            <div className={\"banner\"} style={styles.bannerContainer} >\n                <p className={\"banner__content\"} style={styles.banner} >{content}</p>\n            </div>\n        );\n    }\n\n\n    let classOfMsg = \"banner\";\n    \n    if ( content.sendersName!==false ){\n        if (content.sendersName===sender ) {\n            classOfMsg = \"sent\";\n        } else {\n            classOfMsg = \"received\";\n        }\n    }\n\n    if ( classOfMsg===\"banner\" ) {\n        return (\n            <Banner content={content.messageBody} />\n        )\n    } else {\n        return (<>\n            \n            <div style={styles['messageBody'+classOfMsg]} >\n                \n                <img src={(theme==='light')? ((classOfMsg==='sent')?lightSentPin:lightReceivedPin) : ((classOfMsg==='sent')?darkSentPin:darkReceivedPin)} \n                alt={'msgpin'} />\n\n                <div className={classOfMsg} style={styles[classOfMsg]} >\n                    <p className={\"sender\"} style={styles.senderName} >{content.sendersName}</p>\n                    <div className={\"contentOfMessage\"} style={{width: 'fit-content', wordWrap: 'break-word', lineHeight: '19px'}} >\n                        {parse(processMessage(content.messageBody))}\n                    </div>\n                    \n                    {  \n                    (classOfMsg!==\"banner\")?\n                    <p style={styles.time} >{content.timestamp.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</p>\n                    :<></>\n                    }\n\n                </div>\n                \n            </div>\n        </>)\n    }\n\n    // sent,\n    // received,\n    // banner\n\n}\n\nexport default Message;\n","/Users/proRam/Documents/whatsapp-backup-parser/src/views/components/chatroom/index.js",["33"],"/Users/proRam/Documents/whatsapp-backup-parser/src/views/pages/Home/index.js",["34"],"/Users/proRam/Documents/whatsapp-backup-parser/src/utils/makeMessages.js",[],"/Users/proRam/Documents/whatsapp-backup-parser/src/App.js",[],"/Users/proRam/Documents/whatsapp-backup-parser/src/views/components/AuthorModal.js",["35"],{"ruleId":"36","severity":1,"message":"37","line":16,"column":87,"nodeType":"38","messageId":"39","endLine":16,"endColumn":88,"suggestions":"40"},{"ruleId":"36","severity":1,"message":"41","line":16,"column":89,"nodeType":"38","messageId":"39","endLine":16,"endColumn":90,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":13,"column":8,"nodeType":"45","messageId":"46","endLine":13,"endColumn":25},{"ruleId":"47","severity":1,"message":"48","line":208,"column":80,"nodeType":"49","endLine":208,"endColumn":130},{"ruleId":"50","severity":1,"message":"51","line":16,"column":7,"nodeType":"52","endLine":16,"endColumn":20,"suggestions":"53"},"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["54","55"],"Unnecessary escape character: \\..",["56","57"],"no-unused-vars","'unknownPersonIcon' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onOpenModal'. Either include it or remove the dependency array.","ArrayExpression",["58"],{"messageId":"59","fix":"60","desc":"61"},{"messageId":"62","fix":"63","desc":"64"},{"messageId":"59","fix":"65","desc":"61"},{"messageId":"62","fix":"66","desc":"64"},{"desc":"67","fix":"68"},"removeEscape",{"range":"69","text":"70"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"71","text":"72"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"73","text":"70"},{"range":"74","text":"72"},"Update the dependencies array to be: [authorsList, onOpenModal]",{"range":"75","text":"76"},[756,757],"",[756,756],"\\",[758,759],[758,758],[504,517],"[authorsList, onOpenModal]"]